{"version":3,"sources":["app/questions.js","quiz/question.js","quiz/index.js","index.js","app/index.js"],"names":["getQuestions","axios","get","then","response","data","results","catch","error","console","log","Question","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","renderAnswer","answer","_this$state","state","hasAnswered","isCorrect","answerSelected","question","react_default","a","createElement","key","onClick","selectAnswer","dangerouslySetInnerHTML","__html","className","correct_answer","selected","setState","shuffle","array","i","length","j","Math","floor","random","temp","_this$props$question","incorrect_answers","answerList","concat","nextProps","_nextProps$question","map","React","Component","Quiz","restartGame","isLoading","isError","questions","currentQuestion","score","canProceed","completed","fetchQuestions","undefined","_renderHeader","_answerSelected","_this$state2","_nextQuestion","_this$state3","style","textAlign","question_Question","bind","target","document","querySelector","render","src_quiz"],"mappings":"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","file":"static/js/main.ef7cc76a.chunk.js","sourcesContent":["import axios from 'axios';\r\n\r\nconst getQuestions = () => {\r\n\r\n    return axios\r\n        .get('https://opentdb.com/api.php?amount=10&category=9&difficulty=easy&type=multiple')\r\n        .then((response) => {\r\n            return response.data.results;\r\n\r\n        })\r\n        .catch((error) => {\r\n            console.log(error);\r\n        });\r\n\r\n}\r\nexport default getQuestions;","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport './question.css';\r\n\r\nexport default class Question extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        const {correct_answer, incorrect_answers} = this.props.question;\r\n        const answerList = this.shuffle(incorrect_answers.concat([correct_answer]));\r\n\r\n        this.state = {\r\n            hasAnswered: false,\r\n            isCorrect: false,\r\n            answerSelected: '',\r\n            answerList\r\n        };\r\n    }\r\n\r\n    static propTypes = {\r\n        question: PropTypes.object.isRequired,\r\n        answerSelected: PropTypes.func.isRequired\r\n    }\r\n\r\n    componentWillReceiveProps(nextProps) {\r\n        if (this.props.question !== nextProps.question) {\r\n            const {correct_answer, incorrect_answers} = nextProps.question;\r\n            const answerList = this.shuffle(incorrect_answers.concat([correct_answer]));\r\n\r\n            this.setState({hasAnswered: false, isCorrect: false, answerSelected: '', answerList});\r\n        }\r\n    }\r\n\r\n    render() {\r\n        const {question} = this.props.question;\r\n\r\n        return (\r\n            <div className='question'>\r\n                <h3\r\n                    dangerouslySetInnerHTML={{\r\n                    __html: question\r\n                }}/>\r\n                <ul>\r\n                    {this\r\n                        .state\r\n                        .answerList\r\n                        .map(this.renderAnswer)}\r\n                </ul>\r\n            </div>\r\n        );\r\n    }\r\n\r\n    renderAnswer = answer => {\r\n        const {hasAnswered, isCorrect, answerSelected} = this.state;\r\n        const {question} = this.props;\r\n\r\n        if (!hasAnswered) {\r\n            return <li\r\n                key={answer}\r\n                onClick={() => this.selectAnswer(answer)}\r\n                dangerouslySetInnerHTML={{\r\n                __html: answer\r\n            }}/>\r\n        }\r\n\r\n        let className = 'no-class';\r\n        if (question.correct_answer == answer) {\r\n            className = 'correct';\r\n        } else if (!isCorrect && answer === answerSelected) {\r\n            className = 'incorrect';\r\n        }\r\n\r\n        return <li\r\n            key={answer}\r\n            className={className}\r\n            dangerouslySetInnerHTML={{\r\n            __html: answer\r\n        }}/>\r\n    }\r\n\r\n    selectAnswer = selected => {\r\n        let isCorrect = true;\r\n        if (selected === this.props.question.correct_answer) {\r\n            this.setState({hasAnswered: true, isCorrect: true, answerSelected: selected});\r\n        } else {\r\n            isCorrect = false;\r\n            this.setState({hasAnswered: true, isCorrect: false, answerSelected: selected});\r\n        }\r\n\r\n        this\r\n            .props\r\n            .answerSelected(isCorrect);\r\n    }\r\n\r\n    shuffle = array => {\r\n        for (var i = array.length - 1; i > 0; i--) {\r\n            var j = Math.floor(Math.random() * (i + 1));\r\n            var temp = array[i];\r\n            array[i] = array[j];\r\n            array[j] = temp;\r\n        }\r\n        return array;\r\n    }\r\n}","import React from 'react';\r\nimport getQuestions from '../app/questions';\r\nimport Question from './question';\r\nimport './index.css';\r\n\r\nclass Quiz extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.state = {\r\n            isLoading: false,\r\n            isError: false,\r\n            questions: [],\r\n            currentQuestion: 0,\r\n            score: 0,\r\n            canProceed: false,\r\n            completed: false\r\n        };\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.fetchQuestions();\r\n    }\r\n\r\n    restartGame = () => {\r\n        this.setState({\r\n            isLoading: false,\r\n            isError: false,\r\n            questions: [],\r\n            currentQuestion: 0,\r\n            score: 0,\r\n            canProceed: false,\r\n            completed: false\r\n        })\r\n\r\n        this.fetchQuestions();\r\n    }\r\n\r\n    render() {\r\n\r\n        const {\r\n            currentQuestion,\r\n            canProceed,\r\n            score,\r\n            completed,\r\n            questions,\r\n            isLoading,\r\n            isError\r\n        } = this.state;\r\n        const style = {\r\n            'textAlign': 'center'\r\n        }\r\n\r\n        return (\r\n            <div>\r\n                {completed && <div className='wrapper'/>}\r\n                <header>\r\n                    <span className='logo'>Trivia Quiz</span>\r\n\r\n                    {completed && < span className = 'restart-button' onClick = {\r\n                        this.restartGame\r\n                    } > Restart < /span>}\r\n\r\n                    <span className='score'>{`Score : ${score * 10}`}</span>\r\n\r\n                </header>\r\n\r\n                <div className='content'>\r\n                    {isLoading && <h1 style={style}>Loading...</h1>}\r\n                    {isError && <h1 style={style}>Please check your Network connection.</h1>}\r\n\r\n                    {!isLoading && !isError && this._renderHeader()}\r\n                    {questions.length > 0 && <Question\r\n                        question={questions[currentQuestion]}\r\n                        answerSelected={this\r\n                        ._answerSelected\r\n                        .bind(this)}/>\r\n}\r\n\r\n                    {canProceed && <a className='next-button' onClick={this._nextQuestion}>Next Question</a>}\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n\r\n    fetchQuestions = () => {\r\n        this.setState({isLoading: true});\r\n        getQuestions().then((questions) => {\r\n            if (questions == undefined) {\r\n                this.setState({isError: true, isLoading: false});\r\n\r\n            } else {\r\n                this.setState({questions: questions, isLoading: false})\r\n\r\n            }\r\n        })\r\n    }\r\n    _renderHeader = () => {\r\n        const {currentQuestion, score, questions} = this.state;\r\n\r\n        return (\r\n            <div className='quiz-header'>\r\n                <p>{`Question ${currentQuestion + 1} of ${questions.length}`}</p>\r\n            </div>\r\n        )\r\n    }\r\n\r\n    _answerSelected = (isCorrect) => {\r\n        const {currentQuestion, questions} = this.state;\r\n        let completed = false;\r\n\r\n        if (currentQuestion == questions.length - 1) {\r\n            completed = true;\r\n        }\r\n\r\n        const score = this.state.score + (isCorrect\r\n            ? 1\r\n            : 0);\r\n        this.setState({\r\n            score,\r\n            canProceed: currentQuestion < questions.length - 1,\r\n            completed: completed\r\n        });\r\n\r\n    }\r\n\r\n    _nextQuestion = () => {\r\n        this.setState({\r\n            currentQuestion: this.state.currentQuestion + 1,\r\n            canProceed: false\r\n        })\r\n    }\r\n}\r\n\r\nexport default Quiz;","import React from 'react';\nimport {render} from 'react-dom';\n\nimport App from './app';\nimport './index.css';\n\nconst target = document.querySelector('#root')\n\nrender(\n  <App/>, target)\n","import React from 'react';\r\nimport Quiz from '../quiz';\r\n\r\nimport './index.css';\r\n\r\nexport default() => (\r\n\r\n  <main>\r\n    <Quiz/>\r\n  </main>\r\n\r\n)"],"sourceRoot":""}